{"name": "Проверяем увеличение счетчика Выполнено за все время при создании нового заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/\">...</a> is not clickable at point (88, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CA6DB095+29557]\n\t(No symbol) [0x00007FF6CA64FA50]\n\t(No symbol) [0x00007FF6CA50B56A]\n\t(No symbol) [0x00007FF6CA56737E]\n\t(No symbol) [0x00007FF6CA564DCC]\n\t(No symbol) [0x00007FF6CA562288]\n\t(No symbol) [0x00007FF6CA56149A]\n\t(No symbol) [0x00007FF6CA55354E]\n\t(No symbol) [0x00007FF6CA58718A]\n\t(No symbol) [0x00007FF6CA552E86]\n\t(No symbol) [0x00007FF6CA5873A0]\n\t(No symbol) [0x00007FF6CA5A851C]\n\t(No symbol) [0x00007FF6CA586F33]\n\t(No symbol) [0x00007FF6CA55116F]\n\t(No symbol) [0x00007FF6CA5522D1]\n\tGetHandleVerifier [0x00007FF6CAA0C96D+3378253]\n\tGetHandleVerifier [0x00007FF6CAA58497+3688311]\n\tGetHandleVerifier [0x00007FF6CAA4D1CB+3642539]\n\tGetHandleVerifier [0x00007FF6CA79A6B6+813462]\n\t(No symbol) [0x00007FF6CA65AB5F]\n\t(No symbol) [0x00007FF6CA656B74]\n\t(No symbol) [0x00007FF6CA656D10]\n\t(No symbol) [0x00007FF6CA645C1F]\n\tBaseThreadInitThunk [0x00007FFF11DB7614+20]\n\tRtlUserThreadStart [0x00007FFF121C26B1+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4330f13a830bd94ab1822500c23b6e8b\")>\ncreate_and_login_user = {'email': 'shannon33@example.com', 'name': 'Anthony', 'password': '!KY8Qv'}\n\n    @allure.step(\"Создание бургера авторизированным пользователем\")\n    @allure.description(\"Возвращаем номер заказа из всплывающего окна\")\n    @pytest.fixture()\n    def create_burger_with_popup_number(driver, create_and_login_user):\n        main_page = MainPage(driver)\n>       popup_number = main_page.create_burger_order()\n\nconftest.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:51: in create_burger_order\n    self.open_constructor()\npages\\main_page.py:17: in open_constructor\n    self.click_element(MainPageLocators.CONSTRUCTOR_BUTTON)\npages\\base_page.py:31: in click_element\n    return element.click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025C512C7C20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6CA645C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF11DB7614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF121C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/\">...</a> is not clickable at point (88, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=129.0.6668.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CA6DB095+29557]\nE       \t(No symbol) [0x00007FF6CA64FA50]\nE       \t(No symbol) [0x00007FF6CA50B56A]\nE       \t(No symbol) [0x00007FF6CA56737E]\nE       \t(No symbol) [0x00007FF6CA564DCC]\nE       \t(No symbol) [0x00007FF6CA562288]\nE       \t(No symbol) [0x00007FF6CA56149A]\nE       \t(No symbol) [0x00007FF6CA55354E]\nE       \t(No symbol) [0x00007FF6CA58718A]\nE       \t(No symbol) [0x00007FF6CA552E86]\nE       \t(No symbol) [0x00007FF6CA5873A0]\nE       \t(No symbol) [0x00007FF6CA5A851C]\nE       \t(No symbol) [0x00007FF6CA586F33]\nE       \t(No symbol) [0x00007FF6CA55116F]\nE       \t(No symbol) [0x00007FF6CA5522D1]\nE       \tGetHandleVerifier [0x00007FF6CAA0C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF6CAA58497+3688311]\nE       \tGetHandleVerifier [0x00007FF6CAA4D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF6CA79A6B6+813462]\nE       \t(No symbol) [0x00007FF6CA65AB5F]\nE       \t(No symbol) [0x00007FF6CA656B74]\nE       \t(No symbol) [0x00007FF6CA656D10]\nE       \t(No symbol) [0x00007FF6CA645C1F]\nE       \tBaseThreadInitThunk [0x00007FFF11DB7614+20]\nE       \tRtlUserThreadStart [0x00007FFF121C26B1+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1728638506202, "stop": 1728638506202, "uuid": "07bf6aa6-d088-4652-b276-0a822624a875", "historyId": "07ba10b147c75aec599e8dfe999c325c", "testCaseId": "5552ea0be35252d4afc454ea23c5167e", "fullName": "tests.test_order_feed_page.TestOrderFeedPage#test_counter_all_time", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed_page"}, {"name": "subSuite", "value": "TestOrderFeedPage"}, {"name": "host", "value": "HOME"}, {"name": "thread", "value": "10748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed_page"}]}